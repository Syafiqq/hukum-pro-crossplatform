// Mocks generated by Mockito 5.0.7 from annotations
// in hukum_pro/test/arch/data/repository/version_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:hukum_pro/arch/data/data_source/local/cache/contract/version_cache_datasource.dart'
    as _i5;
import 'package:hukum_pro/arch/data/data_source/remote/contract/version_remote_datasource.dart'
    as _i3;
import 'package:hukum_pro/arch/domain/entity/misc/version_entity.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakeVersionEntity extends _i1.Fake implements _i2.VersionEntity {}

/// A class which mocks [VersionRemoteDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockVersionRemoteDatasource extends _i1.Mock
    implements _i3.VersionRemoteDatasource {
  MockVersionRemoteDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.VersionEntity> getVersion() => (super.noSuchMethod(
          Invocation.method(#getVersion, []),
          returnValue: Future<_i2.VersionEntity>.value(_FakeVersionEntity()))
      as _i4.Future<_i2.VersionEntity>);
}

/// A class which mocks [VersionCacheDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockVersionCacheDatasource extends _i1.Mock
    implements _i5.VersionCacheDatasource {
  MockVersionCacheDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.VersionEntity?> getVersion() => (super.noSuchMethod(
          Invocation.method(#getVersion, []),
          returnValue: Future<_i2.VersionEntity?>.value(_FakeVersionEntity()))
      as _i4.Future<_i2.VersionEntity?>);
  @override
  _i4.Future<void> setVersion(_i2.VersionEntity? version) =>
      (super.noSuchMethod(Invocation.method(#setVersion, [version]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
}
